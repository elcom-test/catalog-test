package com.elcom.catalog.dataservice.web;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.elcom.catalog.dataservice.root.DataServiceResponse;
import com.elcom.catalog.dataservice.root.dto.ItemDTO;
import com.elcom.catalog.dataservice.search.model.SearchCriteria;
import com.elcom.catalog.dataservice.search.model.SearchResponse;
import com.elcom.catalog.dataservice.service.ItemService;

import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/item")
public class ItemController extends BaseController {

	private ItemService itemService;

	@Autowired
	private ItemController(ItemService itemService) {
		this.itemService = itemService;
	}
	
	@ApiOperation(value = "Fetches a master product record (item) from the database",
 			      notes = "<p>This method fetches a master product record (item) from the database.</p>")
	@GetMapping("/{itemId}")
	public ResponseEntity<DataServiceResponse> getItem(@PathVariable("itemId") Long itemId) {
		
		ItemDTO itemDTO = itemService.getItemById(itemId);
		return buildResponse(itemDTO);
	}

	@ApiOperation(value = "Toggles the status of a master product record (item)",
		          notes = "<p>This method toggles the status of a master product record (item) - this can be used as a shortcut to enable / disable items.</p>")
	@GetMapping("/toggle-status/{itemId}")
	public ResponseEntity<DataServiceResponse> toggleStatus(@PathVariable("itemId") Long itemId) {
		
		ItemDTO itemDTO = itemService.toggleItemActiveStatus(itemId);
		return buildResponse(itemDTO);
	}
	
	@ApiOperation(value = "Persists a master product record (item) in the database",
	              notes = "<p>This method persists a master product record (item) in the database. If an id is provided the record (if found will be updated).</p>")
	@PostMapping("/")
	public ResponseEntity<DataServiceResponse> saveItem(@Valid @RequestBody ItemDTO itemDTO, BindingResult bindingResult) {
		
		if (bindingResult.hasErrors()) {
			return buildBadRequestResponse(itemDTO, bindingResult);
		}
		
		try {
			itemService.saveItem(itemDTO);
			return buildResponse(itemDTO);
		} catch(Exception e) {
			return buildBadRequestResponse("The item could not be saved. Error encountered: "+e.getMessage());
		}
	}
	
	@ApiOperation(value = "Removes a master product record (item) from the database",
                  notes = "<p>This method removes a master product record (item) from the database. An id is the only attribute required in the request json.</p>")
	@DeleteMapping("/delete/{itemId}")
	public ResponseEntity<DataServiceResponse> deleteItem(@RequestBody ItemDTO itemDTO) {
		
		itemService.deleteItem(itemDTO);
		return buildResponse(itemDTO);
	}
	
	@PostMapping("/search")
	public ResponseEntity<DataServiceResponse> searchSICCode(@Valid @RequestBody SearchCriteria searchCriteria, BindingResult bindingResult) {
		
		if (bindingResult.hasErrors()) {
			return buildBadRequestResponse(searchCriteria, bindingResult);
		}
		
		SearchResponse searchResponse = itemService.searchItems(searchCriteria);
		return buildResponse(searchResponse);
	}
	
	
}
